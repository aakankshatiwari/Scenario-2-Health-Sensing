# -*- coding: utf-8 -*-
"""create_dataset.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ovSkCbZCbRkVIzn58mjT4zF8l2RfU9gs
"""

import os
import numpy as np
import pandas as pd
from datetime import timedelta
from scripts.filter_signals import bandpass_filter

def parse_signal(file, fs):
    with open(file, 'r') as f:
        values = [float(line.strip()) for line in f if line.strip()]
    start = pd.to_datetime("2024-05-28 21:00:00")
    times = [start + timedelta(seconds=i / fs) for i in range(len(values))]
    return pd.DataFrame({'timestamp': times, 'value': values}).set_index('timestamp')

def create_windows(signal, labels_df, fs, label_col):
    win_len = 30 * fs
    stride = 15 * fs
    data, labels = [], []
    idx = 0
    signal = signal.sort_index()

    while idx + win_len <= len(signal):
        win = signal.iloc[idx:idx+win_len]
        start, end = win.index[0], win.index[-1]
        label = 'Normal'

        overlaps = labels_df[(labels_df['start'] < end) & (labels_df['end'] > start)]
        for _, row in overlaps.iterrows():
            overlap = (min(end, row['end']) - max(start, row['start'])).total_seconds()
            if overlap >= 15:
                label = row[label_col]
                break

        data.append(win['value'].values)
        labels.append(label)
        idx += stride
    return data, labels

def main(data_dir='Data', out_dir='Dataset'):
    os.makedirs(out_dir, exist_ok=True)
    X_breath, y_breath, pid_breath = [], [], []
    X_sleep, y_sleep, pid_sleep = [], [], []

    for pid in sorted(os.listdir(data_dir)):
        path = os.path.join(data_dir, pid)
        if not os.path.isdir(path): continue

        af = parse_signal(os.path.join(path, 'nasal_airflow.txt'), fs=32)
        events = pd.read_csv(os.path.join(path, 'flow_events.csv'), parse_dates=['start', 'end'])
        stages = pd.read_csv(os.path.join(path, 'sleep_profile.csv'), parse_dates=['start', 'end'])

        af['value'] = bandpass_filter(af['value'], fs=32)
        xb, yb = create_windows(af, events, fs=32, label_col='label')
        xs, ys = create_windows(af, stages, fs=32, label_col='stage')

        X_breath.extend(xb); y_breath.extend(yb); pid_breath.extend([pid]*len(xb))
        X_sleep.extend(xs); y_sleep.extend(ys); pid_sleep.extend([pid]*len(xs))

    df_breath = pd.DataFrame(X_breath)
    df_breath['label'] = y_breath
    df_breath['participant'] = pid_breath
    df_breath.to_csv(os.path.join(out_dir, 'breathing_dataset.csv'), index=False)

    df_sleep = pd.DataFrame(X_sleep)
    df_sleep['label'] = y_sleep
    df_sleep['participant'] = pid_sleep
    df_sleep.to_csv(os.path.join(out_dir, 'sleep_stage_dataset.csv'), index=False)

if __name__ == '__main__':
    main()

