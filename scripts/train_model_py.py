# -*- coding: utf-8 -*-
"""train_model.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M-fRhRdS1jNmqoxqU1zir_lv-DWpCEIw
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import LeaveOneGroupOut
from sklearn.metrics import classification_report, confusion_matrix
from tensorflow.keras.utils import to_categorical
from models.cnn_model import build_cnn
from models.conv_lstm_model import build_conv_lstm

def train_model(csv_path, model_type='cnn'):
    print(f"\nTraining on {csv_path} using {model_type.upper()} model...")
    df = pd.read_csv(csv_path)
    X = df.drop(columns=['participant', 'label']).values
    y = df['label'].values
    groups = df['participant'].values

    le = LabelEncoder()
    y_enc = le.fit_transform(y)
    y_cat = to_categorical(y_enc)
    X = X.reshape((X.shape[0], X.shape[1], 1))

    logo = LeaveOneGroupOut()
    for i, (train_idx, test_idx) in enumerate(logo.split(X, y_cat, groups)):
        print(f"\nFold {i+1} â€” Test on: {groups[test_idx[0]]}")

        if model_type == 'cnn':
            model = build_cnn(input_shape=(X.shape[1], 1), num_classes=len(le.classes_))
        else:
            model = build_conv_lstm(input_shape=(X.shape[1], 1), num_classes=len(le.classes_))

        model.fit(X[train_idx], y_cat[train_idx], epochs=10, batch_size=64, verbose=0)

        preds = model.predict(X[test_idx]).argmax(axis=1)
        true = y_cat[test_idx].argmax(axis=1)
        print(classification_report(true, preds, target_names=le.classes_))
        print("Confusion Matrix:\n", confusion_matrix(true, preds))

if __name__ == '__main__':
    train_model("Dataset/breathing_dataset.csv", model_type='cnn')
    train_model("Dataset/sleep_stage_dataset.csv", model_type='conv_lstm')