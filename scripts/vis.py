# -*- coding: utf-8 -*-
"""vis.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ovSkCbZCbRkVIzn58mjT4zF8l2RfU9gs
"""

import os
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from datetime import datetime, timedelta

def parse_signal_txt(file_path, sample_rate):
    with open(file_path, 'r') as f:
        values = [float(line.strip()) for line in f if line.strip()]
    start_time = datetime.strptime("2024-05-28 21:00:00", "%Y-%m-%d %H:%M:%S")
    timestamps = [start_time + timedelta(seconds=i / sample_rate) for i in range(len(values))]
    return pd.DataFrame({'timestamp': timestamps, 'value': values}).set_index('timestamp')

def load_all_signals(participant_path):
    af = parse_signal_txt(os.path.join(participant_path, "nasal_airflow.txt"), 32)
    th = parse_signal_txt(os.path.join(participant_path, "thoracic_movement.txt"), 32)
    spo2 = parse_signal_txt(os.path.join(participant_path, "spo2.txt"), 4)
    events = pd.read_csv(os.path.join(participant_path, "flow_events.csv"), parse_dates=['start', 'end'])
    return af, th, spo2, events

def plot_signals_to_pdf(participant_id):
    path = os.path.join("Data", participant_id)
    af, th, spo2, events = load_all_signals(path)

    out_path = os.path.join("Visualizations", f"{participant_id}_visualization.pdf")
    os.makedirs("Visualizations", exist_ok=True)

    window = timedelta(minutes=5)
    t = af.index[0]
    end = af.index[-1]

    with PdfPages(out_path) as pdf:
        while t + window <= end:
            fig, axs = plt.subplots(3, 1, figsize=(16, 10), sharex=True)

            af_seg = af[t:t+window]
            th_seg = th[t:t+window]
            sp_seg = spo2[t:t+window]

            axs[0].plot(af_seg.index, af_seg['value'], label='Nasal Airflow')
            axs[1].plot(th_seg.index, th_seg['value'], label='Thoracic Movement')
            axs[2].plot(sp_seg.index, sp_seg['value'], label='SpOâ‚‚')

            for _, row in events.iterrows():
                if row['start'] <= t + window and row['end'] >= t:
                    axs[0].axvspan(max(row['start'], t), min(row['end'], t+window), color='red', alpha=0.3)
                    axs[1].axvspan(max(row['start'], t), min(row['end'], t+window), color='red', alpha=0.3)

            for ax in axs:
                ax.legend()
                ax.grid(True)

            fig.suptitle(f"{participant_id} - {t} to {t+window}")
            pdf.savefig(fig)
            plt.close()
            t += window

if __name__ == '__main__':
    for pid in sorted(os.listdir("Data")):
        if os.path.isdir(os.path.join("Data", pid)):
            plot_signals_to_pdf(pid)

